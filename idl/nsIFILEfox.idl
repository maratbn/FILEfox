/**
 *  Copyright (c) 2010 Marat Nepomnyashy    maratbn@gmail
 *  All rights reserved.
 *
 *  Module: idl/nsIFILEfox.idl
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of the <organization> nor the
 *        names of its contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 *
 *  The XPCOM interface 'nsIFILEfox' is declared here.
 */


#include "nsISupports.idl"

/**
 *  This interface is intended to pass text files between the 'nsFILEfox' XPCOM object and the browser DOM.
 */
[scriptable, uuid(0e7951ba-f28d-4ee8-8b65-79691fb2d15a)]
interface nsIFILEfoxTextFile : nsISupports {

    /**
     *  The encoding with which this text file is encoded.
     */
    readonly attribute string encoding;

    /**
     *  Total number of lines in the text file.
     *
     *  The text file is stored line by line rather than in a single string, as otherwise a huge file in a huge string
     *  would overwhelm the browser's JavaScript engine.
     */
    readonly attribute unsigned long totalLines;

    /**
     *  Returns a single line out of the text file, including the line termination carriage return character sequence.
     *
     *  @param  indexLine           Number                  0-based index of the line.
     */
    string getLine(in unsigned long indexLine);
};

/**
 *  This interface is returned from the 'nxFILEfox' XPCOM object with a newly read text file.
 */
[scriptable, uuid(e7c31f54-51e1-44b9-beb0-2986756e6be2)]
interface nsIFILEfoxTextFileRead : nsIFILEfoxTextFile {
    /**
     *  Total number of characters in the text file.
     */
    readonly attribute unsigned long totalChars;
};

/**
 *  This interface is used internally by the 'nsFILEfox' XPCOM object to construct an object conforming to the 'nsIFILEfoxTextFileRead' contract.
 */
[scriptable, uuid(9d163612-2c51-430d-9460-62cb0f2ffe46)]
interface nsIFILEfoxTextFileReadOut : nsIFILEfoxTextFileRead {
    void setData(in string strEncoding, in unsigned long totalLetters, in unsigned long totalLines, [const, array, size_is(totalLines)] in string arrLines);
};

[scriptable, uuid(7faaf2e7-a039-4a86-89f7-1406110c908c)]
interface nsIFILEfox : nsISupports {

    /**
     *  Returns the version of the currently installed FILEfox extension.
     */
    string getVersion();

    /**
     *  Causes the FILEfox extension to request from the user to manually select an ASCII text file to load.  Upon
     *  user approval FILEfox will initiate a Mozilla-internal synchroneous file loading routine via XPCOM, and then
     *  return the file contents in a data object corresponding to the 'nsIFILEfoxTextFileRead' interface, or a falsy
     *  value on failure.
     *
     *  The returned data object should be assigned to a private local variable inside the calling function and later
     *  accessed via closure to prevent exposing it to other scripts on the page.
     *
     *  @param  strUPFile           String          A string identifying the requesting application's upload policy
     *                                              for file contents.  Only valid upload policies are accepted.
     *                                              Valid upload policies for file contents are:
     *
     *                                              'upload_policy_file_never'      File contents are never uploaded.
     *                                              'upload_policy_file_always'     File contents are always uploaded.
     *                                              'upload_policy_file_asks_later' Application will later ask the
     *                                                                              user for permission to upload.
     *
     *  @param  strUPDerivedData    String          A string identifying the requesting application's upload policy
     *                                              for data derived from file contents.  Only valid upload policies
     *                                              are accepted.  Valid upload policies for derived data are:
     *
     *                                              'upload_policy_derived_data_never'      Derived data is never uploaded.
     *                                              'upload_policy_derived_data_always'     Derived data is always uploaded.
     *                                              'upload_policy_derived_data_asks_later' Application will later ask the
     *                                                                                      user for permission to upload.
     *
     *  @param  strApplicationName  String          A short textual name identifying the JavaScript
     *                                              application requesting the file.  The application will be
     *                                              identified to the user by this name.
     *
     *  @param  strMessageToUser    String          A longer textual request message providing file loading
     *                                              instructions to the user, and explaining why the
     *                                              JavaScript application is requesting the file.
     */
    nsIFILEfoxTextFileRead requestLoadASCIIFile(
                                in string strUploadPolicyForFile,
                                in string strUploadPolicyForDerivedData,
                                in string strApplicationName,
                                in string strMessageToUser);
};
